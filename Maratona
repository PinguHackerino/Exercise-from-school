#by riccardo cotani, leonardo papa, gianmarco roberti, corretto con ChatGPT
import threading
import time
import random

class Atleta:
    def __init__(self, nome, cognome, eta, peso, tempo_minimo):
        self.nome = nome
        self.cognome = cognome
        self.eta = eta
        self.peso = peso
        self.tempo_minimo = tempo_minimo
        self.tempo_totale = 0
        self.report = []
        self.ha_avuto_stiramento = False
        self.ha_contrattura_persistente = False

    def iscrivi(self):
        if self.tempo_minimo is not None and 0 < self.tempo_minimo < 6:  # Verifica aggiunta: tempo minimo inferiore a 6 minuti
            print(f"{self.nome} {self.cognome} è stato iscritto alla gara.")
            return True
        else:
            print(f"{self.nome} {self.cognome} non ha un tempo minimo valido e non può partecipare.")
            return False

    def corre(self, lunghezza_gara):
        for km in range(2, lunghezza_gara + 1, 2):
            evento = random.randint(1, 10)
            if evento == 1:
                self.scatto(km)
            elif evento == 2:
                self.contrattura(km)
                if self.ha_contrattura_persistente:
                    break
            elif 3 <= evento <= 7:
                self.andatura_normale(km)
            elif evento == 8:
                self.stiramento(km)
                break
            elif evento == 9:
                self.ritmo_aumento(km)
            elif evento == 10:
                self.stanchezza(km)

            time.sleep(2)

        if not self.ha_avuto_stiramento and not self.ha_contrattura_persistente:
            print(f"{self.nome} {self.cognome} ha terminato la gara con un tempo totale di {self.tempo_totale} secondi.")
        elif self.ha_contrattura_persistente:
            print(f"{self.nome} {self.cognome} ha contrattura persistente e non può vincere la gara.")
        else:
            print(f"{self.nome} {self.cognome} ha avuto uno stiramento e non può vincere la gara.")

    def scatto(self, km):
        print(f"Scatto per {self.nome} {self.cognome}.")
        self.tempo_totale -= int(self.tempo_minimo * 0.3)
        time.sleep(2)
        self.report.append(f"Scatto al km {km}")

    def contrattura(self, km):
        print(f"Contrattura per {self.nome} {self.cognome}.")
        self.tempo_totale *= 2
        time.sleep(2)
        scioglimento = random.randint(1, 2)
        if scioglimento == 2:
            self.report.append("Contrattura si è sciolta.")
        else:
            self.report.append("Contrattura persiste.")
            self.ha_contrattura_persistente = True

    def andatura_normale(self, km):
        print(f"Andatura normale per {self.nome} {self.cognome}.")
        time.sleep(2)
        self.tempo_totale += int(self.tempo_minimo)
        self.report.append(f"Andatura normale al km {km}")

    def stiramento(self, km):
        print(f"Stiramento per {self.nome} {self.cognome}.")
        self.tempo_totale *= 4
        self.report.append(f"Stiramento al km {km}. Gara terminata.")
        self.ha_avuto_stiramento = True

    def ritmo_aumento(self, km):
        print(f"Ritmo in aumento per {self.nome} {self.cognome}.")
        self.tempo_totale -= int(self.tempo_minimo * 0.1)
        time.sleep(2)
        self.report.append(f"Ritmo in aumento al km {km}")

    def stanchezza(self, km):
        print(f"Stanchezza per {self.nome} {self.cognome}.")
        self.tempo_totale += int(self.tempo_minimo * 0.1)
        time.sleep(2)
        self.report.append(f"Stanchezza al km {km}")

class Gara:
    def __init__(self):
        self.lunghezza_gara = 0
        self.max_iscritti = 0
        self.atleti = []

    def set_parametri_gara(self, lunghezza_gara, max_iscritti):
        self.lunghezza_gara = lunghezza_gara
        self.max_iscritti = max_iscritti

    def inserisci_atleta(self, atleta):
        if atleta.iscrivi():
            if len(self.atleti) < self.max_iscritti:
                if atleta.tempo_totale <= 300:
                    self.atleti.append(atleta)
                    print("Atleta aggiunto con successo.")
                else:
                    print("Atleta non può essere iscritto. Tempo totale della competizione superiore a 5 minuti.")
            else:
                print("Numero massimo di iscritti superato. Impossibile aggiungere l'atleta.")
        else:
            print("Atleta non può essere iscritto.")

    def visualizza_atleti(self):
        print("\nElenco degli atleti:")
        for i, atleta in enumerate(self.atleti, start=1):
            print(f"{i}. {atleta.nome} {atleta.cognome}")

    def aggiorna_atleta(self, nome_cognome):
        for atleta in self.atleti:
            if f"{atleta.nome} {atleta.cognome}" == nome_cognome:
                atleta.nome = input("Inserisci il nuovo nome dell'atleta: ")
                atleta.cognome = input("Inserisci il nuovo cognome dell'atleta: ")
                atleta.eta = int(input("Inserisci la nuova età dell'atleta: "))
                atleta.peso = int(input("Inserisci il nuovo peso dell'atleta: "))
                atleta.tempo_minimo = int(input("Inserisci il nuovo tempo minimo di corsa a km dell'atleta: "))
                print("Atleta aggiornato con successo.")
                break
        else:
            print("Atleta non trovato.")

    def cancella_atleta(self, nome_cognome):
        for atleta in self.atleti:
            if f"{atleta.nome} {atleta.cognome}" == nome_cognome:
                self.atleti.remove(atleta)
                print("Atleta cancellato con successo.")
                break
        else:
            print("Atleta non trovato.")

    def avvia_gara(self):
        threads = []
        for atleta in self.atleti:
            thread_atleta = threading.Thread(target=atleta.corre, args=(self.lunghezza_gara,))
            thread_atleta.start()
            threads.append(thread_atleta)

        for thread_atleta in threads:
            thread_atleta.join() 

        classifica = [atleta for atleta in self.atleti if not atleta.ha_avuto_stiramento and not atleta.ha_contrattura_persistente]
        classifica = sorted(classifica, key=lambda x: x.tempo_totale)

        print("\nClassifica finale:")
        for i, atleta in enumerate(classifica, start=1):
            print(f"{i}. {atleta.nome} {atleta.cognome} - Tempo: {atleta.tempo_totale} secondi")
            print("Report di gara:")
            for evento in atleta.report:
                print(evento)

def inserisci_parametri_gara():
    lunghezza_gara = int(input("Inserisci la lunghezza della gara in km: "))
    max_iscritti = int(input("Inserisci il numero massimo di iscritti alla gara: "))
    return lunghezza_gara, max_iscritti

def main():
    print('BENVENUTO NELLA MARATONA')
    
    gara = Gara()
    lunghezza_gara, max_iscritti = inserisci_parametri_gara()
    gara.set_parametri_gara(lunghezza_gara, max_iscritti)

    while True:
        print("\nMenu:")
        print("1. Inserisci un nuovo atleta")
        print("2. Visualizza atleti")
        print("3. Aggiorna un atleta")
        print("4. Cancella un atleta")
        print("5. Inizia la maratona")
        print("6. Esci")

        scelta = input("Scegli un'opzione (1-6): ")

        if scelta == "1":
            atleta = Atleta(
                input("Inserisci il nome dell'atleta: "),
                input("Inserisci il cognome dell'atleta: "),
                int(input("Inserisci l'età dell'atleta: ")),
                int(input("Inserisci il peso dell'atleta: ")),
                int(input("Inserisci il tempo minimo di corsa a km dell'atleta: "))
            )
            gara.inserisci_atleta(atleta)

        elif scelta == "2":
            gara.visualizza_atleti()

        elif scelta == "3":
            nome_cognome = input("Inserisci il nome e cognome dell'atleta da aggiornare: ")
            gara.aggiorna_atleta(nome_cognome)

        elif scelta == "4":
            nome_cognome = input("Inserisci il nome e cognome dell'atleta da cancellare: ")
            gara.cancella_atleta(nome_cognome)

        elif scelta == "5":
            gara.avvia_gara()

        elif scelta == "6":
            break

        else:
            print("Opzione non valida. Riprova.")

        time.sleep(2)

if __name__ == "__main__":
    main()
